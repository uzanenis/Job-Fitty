// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole         @default(USER)
  PdfFile        PdfFile[]
  Job            Job[]
  CandidateScore CandidateScore[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PdfFile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  fileName  String
  fileUrl   String
  fileText  String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("pdf_files")
}

model Job {
  id                  String           @id @default(cuid())
  createdAt           DateTime         @default(now())
  title               String
  description         String
  experience          String
  position            String
  technologies        String[]
  workType            String
  isActive            Boolean          @default(true)
  createdBy           User             @relation(fields: [userId], references: [id])
  salaryMin           Int?
  salaryMax           Int?
  educationLevel      String?
  languageRequirement String?
  additionalInfo      String?
  userId              String
  CandidateScore      CandidateScore[]

  @@map("jobs")
}

// write a model for created candidates scores
model CandidateScore {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  score     Int
  jobId     String
  userId    String
  feedback  String?
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("candidate_scores")
}
